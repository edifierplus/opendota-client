# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20029(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team_id': 'int',
        'rating': 'float',
        'wins': 'int',
        'losses': 'int',
        'last_match_time': 'int',
        'name': 'str',
        'tag': 'str'
    }

    attribute_map = {
        'team_id': 'team_id',
        'rating': 'rating',
        'wins': 'wins',
        'losses': 'losses',
        'last_match_time': 'last_match_time',
        'name': 'name',
        'tag': 'tag'
    }

    def __init__(self, team_id=None, rating=None, wins=None, losses=None, last_match_time=None, name=None, tag=None):  # noqa: E501
        """InlineResponse20029 - a model defined in Swagger"""  # noqa: E501

        self._team_id = None
        self._rating = None
        self._wins = None
        self._losses = None
        self._last_match_time = None
        self._name = None
        self._tag = None
        self.discriminator = None

        if team_id is not None:
            self.team_id = team_id
        if rating is not None:
            self.rating = rating
        if wins is not None:
            self.wins = wins
        if losses is not None:
            self.losses = losses
        if last_match_time is not None:
            self.last_match_time = last_match_time
        if name is not None:
            self.name = name
        if tag is not None:
            self.tag = tag

    @property
    def team_id(self):
        """Gets the team_id of this InlineResponse20029.  # noqa: E501

        Team's identifier  # noqa: E501

        :return: The team_id of this InlineResponse20029.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this InlineResponse20029.

        Team's identifier  # noqa: E501

        :param team_id: The team_id of this InlineResponse20029.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def rating(self):
        """Gets the rating of this InlineResponse20029.  # noqa: E501

        The Elo rating of the team  # noqa: E501

        :return: The rating of this InlineResponse20029.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this InlineResponse20029.

        The Elo rating of the team  # noqa: E501

        :param rating: The rating of this InlineResponse20029.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def wins(self):
        """Gets the wins of this InlineResponse20029.  # noqa: E501

        The number of games won by this team  # noqa: E501

        :return: The wins of this InlineResponse20029.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this InlineResponse20029.

        The number of games won by this team  # noqa: E501

        :param wins: The wins of this InlineResponse20029.  # noqa: E501
        :type: int
        """

        self._wins = wins

    @property
    def losses(self):
        """Gets the losses of this InlineResponse20029.  # noqa: E501

        The number of losses by this team  # noqa: E501

        :return: The losses of this InlineResponse20029.  # noqa: E501
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses):
        """Sets the losses of this InlineResponse20029.

        The number of losses by this team  # noqa: E501

        :param losses: The losses of this InlineResponse20029.  # noqa: E501
        :type: int
        """

        self._losses = losses

    @property
    def last_match_time(self):
        """Gets the last_match_time of this InlineResponse20029.  # noqa: E501

        The Unix timestamp of the last match played by this team  # noqa: E501

        :return: The last_match_time of this InlineResponse20029.  # noqa: E501
        :rtype: int
        """
        return self._last_match_time

    @last_match_time.setter
    def last_match_time(self, last_match_time):
        """Sets the last_match_time of this InlineResponse20029.

        The Unix timestamp of the last match played by this team  # noqa: E501

        :param last_match_time: The last_match_time of this InlineResponse20029.  # noqa: E501
        :type: int
        """

        self._last_match_time = last_match_time

    @property
    def name(self):
        """Gets the name of this InlineResponse20029.  # noqa: E501

        Team name, eg. 'Newbee'  # noqa: E501

        :return: The name of this InlineResponse20029.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20029.

        Team name, eg. 'Newbee'  # noqa: E501

        :param name: The name of this InlineResponse20029.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tag(self):
        """Gets the tag of this InlineResponse20029.  # noqa: E501

        The team tag/abbreviation  # noqa: E501

        :return: The tag of this InlineResponse20029.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this InlineResponse20029.

        The team tag/abbreviation  # noqa: E501

        :param tag: The tag of this InlineResponse20029.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20029, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20029):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
