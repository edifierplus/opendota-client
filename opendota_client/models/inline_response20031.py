# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20031(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hero_id': 'int',
        'name': 'str',
        'games_played': 'int',
        'wins': 'int'
    }

    attribute_map = {
        'hero_id': 'hero_id',
        'name': 'name',
        'games_played': 'games_played',
        'wins': 'wins'
    }

    def __init__(self, hero_id=None, name=None, games_played=None, wins=None):  # noqa: E501
        """InlineResponse20031 - a model defined in Swagger"""  # noqa: E501

        self._hero_id = None
        self._name = None
        self._games_played = None
        self._wins = None
        self.discriminator = None

        if hero_id is not None:
            self.hero_id = hero_id
        if name is not None:
            self.name = name
        if games_played is not None:
            self.games_played = games_played
        if wins is not None:
            self.wins = wins

    @property
    def hero_id(self):
        """Gets the hero_id of this InlineResponse20031.  # noqa: E501

        The hero ID  # noqa: E501

        :return: The hero_id of this InlineResponse20031.  # noqa: E501
        :rtype: int
        """
        return self._hero_id

    @hero_id.setter
    def hero_id(self, hero_id):
        """Sets the hero_id of this InlineResponse20031.

        The hero ID  # noqa: E501

        :param hero_id: The hero_id of this InlineResponse20031.  # noqa: E501
        :type: int
        """

        self._hero_id = hero_id

    @property
    def name(self):
        """Gets the name of this InlineResponse20031.  # noqa: E501

        The hero name  # noqa: E501

        :return: The name of this InlineResponse20031.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20031.

        The hero name  # noqa: E501

        :param name: The name of this InlineResponse20031.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def games_played(self):
        """Gets the games_played of this InlineResponse20031.  # noqa: E501

        Number of games played  # noqa: E501

        :return: The games_played of this InlineResponse20031.  # noqa: E501
        :rtype: int
        """
        return self._games_played

    @games_played.setter
    def games_played(self, games_played):
        """Sets the games_played of this InlineResponse20031.

        Number of games played  # noqa: E501

        :param games_played: The games_played of this InlineResponse20031.  # noqa: E501
        :type: int
        """

        self._games_played = games_played

    @property
    def wins(self):
        """Gets the wins of this InlineResponse20031.  # noqa: E501

        Number of wins  # noqa: E501

        :return: The wins of this InlineResponse20031.  # noqa: E501
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this InlineResponse20031.

        Number of wins  # noqa: E501

        :param wins: The wins of this InlineResponse20031.  # noqa: E501
        :type: int
        """

        self._wins = wins

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20031, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20031):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
