# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2002Profile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'personaname': 'str',
        'name': 'str',
        'plus': 'bool',
        'cheese': 'int',
        'steamid': 'str',
        'avatar': 'str',
        'avatarmedium': 'str',
        'avatarfull': 'str',
        'profileurl': 'str',
        'last_login': 'str',
        'loccountrycode': 'str',
        'is_contributor': 'bool'
    }

    attribute_map = {
        'account_id': 'account_id',
        'personaname': 'personaname',
        'name': 'name',
        'plus': 'plus',
        'cheese': 'cheese',
        'steamid': 'steamid',
        'avatar': 'avatar',
        'avatarmedium': 'avatarmedium',
        'avatarfull': 'avatarfull',
        'profileurl': 'profileurl',
        'last_login': 'last_login',
        'loccountrycode': 'loccountrycode',
        'is_contributor': 'is_contributor'
    }

    def __init__(self, account_id=None, personaname=None, name=None, plus=None, cheese=None, steamid=None, avatar=None, avatarmedium=None, avatarfull=None, profileurl=None, last_login=None, loccountrycode=None, is_contributor=False):  # noqa: E501
        """InlineResponse2002Profile - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._personaname = None
        self._name = None
        self._plus = None
        self._cheese = None
        self._steamid = None
        self._avatar = None
        self._avatarmedium = None
        self._avatarfull = None
        self._profileurl = None
        self._last_login = None
        self._loccountrycode = None
        self._is_contributor = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if personaname is not None:
            self.personaname = personaname
        if name is not None:
            self.name = name
        if plus is not None:
            self.plus = plus
        if cheese is not None:
            self.cheese = cheese
        if steamid is not None:
            self.steamid = steamid
        if avatar is not None:
            self.avatar = avatar
        if avatarmedium is not None:
            self.avatarmedium = avatarmedium
        if avatarfull is not None:
            self.avatarfull = avatarfull
        if profileurl is not None:
            self.profileurl = profileurl
        if last_login is not None:
            self.last_login = last_login
        if loccountrycode is not None:
            self.loccountrycode = loccountrycode
        if is_contributor is not None:
            self.is_contributor = is_contributor

    @property
    def account_id(self):
        """Gets the account_id of this InlineResponse2002Profile.  # noqa: E501

        account_id  # noqa: E501

        :return: The account_id of this InlineResponse2002Profile.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InlineResponse2002Profile.

        account_id  # noqa: E501

        :param account_id: The account_id of this InlineResponse2002Profile.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def personaname(self):
        """Gets the personaname of this InlineResponse2002Profile.  # noqa: E501

        personaname  # noqa: E501

        :return: The personaname of this InlineResponse2002Profile.  # noqa: E501
        :rtype: str
        """
        return self._personaname

    @personaname.setter
    def personaname(self, personaname):
        """Sets the personaname of this InlineResponse2002Profile.

        personaname  # noqa: E501

        :param personaname: The personaname of this InlineResponse2002Profile.  # noqa: E501
        :type: str
        """

        self._personaname = personaname

    @property
    def name(self):
        """Gets the name of this InlineResponse2002Profile.  # noqa: E501

        name  # noqa: E501

        :return: The name of this InlineResponse2002Profile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2002Profile.

        name  # noqa: E501

        :param name: The name of this InlineResponse2002Profile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def plus(self):
        """Gets the plus of this InlineResponse2002Profile.  # noqa: E501

        Boolean indicating status of current Dota Plus subscription  # noqa: E501

        :return: The plus of this InlineResponse2002Profile.  # noqa: E501
        :rtype: bool
        """
        return self._plus

    @plus.setter
    def plus(self, plus):
        """Sets the plus of this InlineResponse2002Profile.

        Boolean indicating status of current Dota Plus subscription  # noqa: E501

        :param plus: The plus of this InlineResponse2002Profile.  # noqa: E501
        :type: bool
        """

        self._plus = plus

    @property
    def cheese(self):
        """Gets the cheese of this InlineResponse2002Profile.  # noqa: E501

        cheese  # noqa: E501

        :return: The cheese of this InlineResponse2002Profile.  # noqa: E501
        :rtype: int
        """
        return self._cheese

    @cheese.setter
    def cheese(self, cheese):
        """Sets the cheese of this InlineResponse2002Profile.

        cheese  # noqa: E501

        :param cheese: The cheese of this InlineResponse2002Profile.  # noqa: E501
        :type: int
        """

        self._cheese = cheese

    @property
    def steamid(self):
        """Gets the steamid of this InlineResponse2002Profile.  # noqa: E501

        steamid  # noqa: E501

        :return: The steamid of this InlineResponse2002Profile.  # noqa: E501
        :rtype: str
        """
        return self._steamid

    @steamid.setter
    def steamid(self, steamid):
        """Sets the steamid of this InlineResponse2002Profile.

        steamid  # noqa: E501

        :param steamid: The steamid of this InlineResponse2002Profile.  # noqa: E501
        :type: str
        """

        self._steamid = steamid

    @property
    def avatar(self):
        """Gets the avatar of this InlineResponse2002Profile.  # noqa: E501

        avatar  # noqa: E501

        :return: The avatar of this InlineResponse2002Profile.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this InlineResponse2002Profile.

        avatar  # noqa: E501

        :param avatar: The avatar of this InlineResponse2002Profile.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def avatarmedium(self):
        """Gets the avatarmedium of this InlineResponse2002Profile.  # noqa: E501

        avatarmedium  # noqa: E501

        :return: The avatarmedium of this InlineResponse2002Profile.  # noqa: E501
        :rtype: str
        """
        return self._avatarmedium

    @avatarmedium.setter
    def avatarmedium(self, avatarmedium):
        """Sets the avatarmedium of this InlineResponse2002Profile.

        avatarmedium  # noqa: E501

        :param avatarmedium: The avatarmedium of this InlineResponse2002Profile.  # noqa: E501
        :type: str
        """

        self._avatarmedium = avatarmedium

    @property
    def avatarfull(self):
        """Gets the avatarfull of this InlineResponse2002Profile.  # noqa: E501

        avatarfull  # noqa: E501

        :return: The avatarfull of this InlineResponse2002Profile.  # noqa: E501
        :rtype: str
        """
        return self._avatarfull

    @avatarfull.setter
    def avatarfull(self, avatarfull):
        """Sets the avatarfull of this InlineResponse2002Profile.

        avatarfull  # noqa: E501

        :param avatarfull: The avatarfull of this InlineResponse2002Profile.  # noqa: E501
        :type: str
        """

        self._avatarfull = avatarfull

    @property
    def profileurl(self):
        """Gets the profileurl of this InlineResponse2002Profile.  # noqa: E501

        profileurl  # noqa: E501

        :return: The profileurl of this InlineResponse2002Profile.  # noqa: E501
        :rtype: str
        """
        return self._profileurl

    @profileurl.setter
    def profileurl(self, profileurl):
        """Sets the profileurl of this InlineResponse2002Profile.

        profileurl  # noqa: E501

        :param profileurl: The profileurl of this InlineResponse2002Profile.  # noqa: E501
        :type: str
        """

        self._profileurl = profileurl

    @property
    def last_login(self):
        """Gets the last_login of this InlineResponse2002Profile.  # noqa: E501

        last_login  # noqa: E501

        :return: The last_login of this InlineResponse2002Profile.  # noqa: E501
        :rtype: str
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this InlineResponse2002Profile.

        last_login  # noqa: E501

        :param last_login: The last_login of this InlineResponse2002Profile.  # noqa: E501
        :type: str
        """

        self._last_login = last_login

    @property
    def loccountrycode(self):
        """Gets the loccountrycode of this InlineResponse2002Profile.  # noqa: E501

        loccountrycode  # noqa: E501

        :return: The loccountrycode of this InlineResponse2002Profile.  # noqa: E501
        :rtype: str
        """
        return self._loccountrycode

    @loccountrycode.setter
    def loccountrycode(self, loccountrycode):
        """Sets the loccountrycode of this InlineResponse2002Profile.

        loccountrycode  # noqa: E501

        :param loccountrycode: The loccountrycode of this InlineResponse2002Profile.  # noqa: E501
        :type: str
        """

        self._loccountrycode = loccountrycode

    @property
    def is_contributor(self):
        """Gets the is_contributor of this InlineResponse2002Profile.  # noqa: E501

        Boolean indicating if the user contributed to the development of OpenDota  # noqa: E501

        :return: The is_contributor of this InlineResponse2002Profile.  # noqa: E501
        :rtype: bool
        """
        return self._is_contributor

    @is_contributor.setter
    def is_contributor(self, is_contributor):
        """Sets the is_contributor of this InlineResponse2002Profile.

        Boolean indicating if the user contributed to the development of OpenDota  # noqa: E501

        :param is_contributor: The is_contributor of this InlineResponse2002Profile.  # noqa: E501
        :type: bool
        """

        self._is_contributor = is_contributor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002Profile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
