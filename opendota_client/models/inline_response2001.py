# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'float',
        'rank_tier': 'float',
        'fh_unavailable': 'bool'
    }

    attribute_map = {
        'account_id': 'account_id',
        'rank_tier': 'rank_tier',
        'fh_unavailable': 'fh_unavailable'
    }

    def __init__(self, account_id=None, rank_tier=None, fh_unavailable=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._rank_tier = None
        self._fh_unavailable = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if rank_tier is not None:
            self.rank_tier = rank_tier
        if fh_unavailable is not None:
            self.fh_unavailable = fh_unavailable

    @property
    def account_id(self):
        """Gets the account_id of this InlineResponse2001.  # noqa: E501

        account_id  # noqa: E501

        :return: The account_id of this InlineResponse2001.  # noqa: E501
        :rtype: float
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InlineResponse2001.

        account_id  # noqa: E501

        :param account_id: The account_id of this InlineResponse2001.  # noqa: E501
        :type: float
        """

        self._account_id = account_id

    @property
    def rank_tier(self):
        """Gets the rank_tier of this InlineResponse2001.  # noqa: E501

        Integer indicating the rank/medal of the player  # noqa: E501

        :return: The rank_tier of this InlineResponse2001.  # noqa: E501
        :rtype: float
        """
        return self._rank_tier

    @rank_tier.setter
    def rank_tier(self, rank_tier):
        """Sets the rank_tier of this InlineResponse2001.

        Integer indicating the rank/medal of the player  # noqa: E501

        :param rank_tier: The rank_tier of this InlineResponse2001.  # noqa: E501
        :type: float
        """

        self._rank_tier = rank_tier

    @property
    def fh_unavailable(self):
        """Gets the fh_unavailable of this InlineResponse2001.  # noqa: E501

        Indicates if we were unable to fetch full history for this player due to privacy settings  # noqa: E501

        :return: The fh_unavailable of this InlineResponse2001.  # noqa: E501
        :rtype: bool
        """
        return self._fh_unavailable

    @fh_unavailable.setter
    def fh_unavailable(self, fh_unavailable):
        """Sets the fh_unavailable of this InlineResponse2001.

        Indicates if we were unable to fetch full history for this player due to privacy settings  # noqa: E501

        :param fh_unavailable: The fh_unavailable of this InlineResponse2001.  # noqa: E501
        :type: bool
        """

        self._fh_unavailable = fh_unavailable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
