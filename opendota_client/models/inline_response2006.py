# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2006(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hero_id': 'str',
        'last_played': 'int',
        'games': 'int',
        'win': 'int',
        'with_games': 'int',
        'with_win': 'int',
        'against_games': 'int',
        'against_win': 'int'
    }

    attribute_map = {
        'hero_id': 'hero_id',
        'last_played': 'last_played',
        'games': 'games',
        'win': 'win',
        'with_games': 'with_games',
        'with_win': 'with_win',
        'against_games': 'against_games',
        'against_win': 'against_win'
    }

    def __init__(self, hero_id=None, last_played=None, games=None, win=None, with_games=None, with_win=None, against_games=None, against_win=None):  # noqa: E501
        """InlineResponse2006 - a model defined in Swagger"""  # noqa: E501

        self._hero_id = None
        self._last_played = None
        self._games = None
        self._win = None
        self._with_games = None
        self._with_win = None
        self._against_games = None
        self._against_win = None
        self.discriminator = None

        if hero_id is not None:
            self.hero_id = hero_id
        if last_played is not None:
            self.last_played = last_played
        if games is not None:
            self.games = games
        if win is not None:
            self.win = win
        if with_games is not None:
            self.with_games = with_games
        if with_win is not None:
            self.with_win = with_win
        if against_games is not None:
            self.against_games = against_games
        if against_win is not None:
            self.against_win = against_win

    @property
    def hero_id(self):
        """Gets the hero_id of this InlineResponse2006.  # noqa: E501

        The ID value of the hero played  # noqa: E501

        :return: The hero_id of this InlineResponse2006.  # noqa: E501
        :rtype: str
        """
        return self._hero_id

    @hero_id.setter
    def hero_id(self, hero_id):
        """Sets the hero_id of this InlineResponse2006.

        The ID value of the hero played  # noqa: E501

        :param hero_id: The hero_id of this InlineResponse2006.  # noqa: E501
        :type: str
        """

        self._hero_id = hero_id

    @property
    def last_played(self):
        """Gets the last_played of this InlineResponse2006.  # noqa: E501

        last_played  # noqa: E501

        :return: The last_played of this InlineResponse2006.  # noqa: E501
        :rtype: int
        """
        return self._last_played

    @last_played.setter
    def last_played(self, last_played):
        """Sets the last_played of this InlineResponse2006.

        last_played  # noqa: E501

        :param last_played: The last_played of this InlineResponse2006.  # noqa: E501
        :type: int
        """

        self._last_played = last_played

    @property
    def games(self):
        """Gets the games of this InlineResponse2006.  # noqa: E501

        games  # noqa: E501

        :return: The games of this InlineResponse2006.  # noqa: E501
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this InlineResponse2006.

        games  # noqa: E501

        :param games: The games of this InlineResponse2006.  # noqa: E501
        :type: int
        """

        self._games = games

    @property
    def win(self):
        """Gets the win of this InlineResponse2006.  # noqa: E501

        win  # noqa: E501

        :return: The win of this InlineResponse2006.  # noqa: E501
        :rtype: int
        """
        return self._win

    @win.setter
    def win(self, win):
        """Sets the win of this InlineResponse2006.

        win  # noqa: E501

        :param win: The win of this InlineResponse2006.  # noqa: E501
        :type: int
        """

        self._win = win

    @property
    def with_games(self):
        """Gets the with_games of this InlineResponse2006.  # noqa: E501

        with_games  # noqa: E501

        :return: The with_games of this InlineResponse2006.  # noqa: E501
        :rtype: int
        """
        return self._with_games

    @with_games.setter
    def with_games(self, with_games):
        """Sets the with_games of this InlineResponse2006.

        with_games  # noqa: E501

        :param with_games: The with_games of this InlineResponse2006.  # noqa: E501
        :type: int
        """

        self._with_games = with_games

    @property
    def with_win(self):
        """Gets the with_win of this InlineResponse2006.  # noqa: E501

        with_win  # noqa: E501

        :return: The with_win of this InlineResponse2006.  # noqa: E501
        :rtype: int
        """
        return self._with_win

    @with_win.setter
    def with_win(self, with_win):
        """Sets the with_win of this InlineResponse2006.

        with_win  # noqa: E501

        :param with_win: The with_win of this InlineResponse2006.  # noqa: E501
        :type: int
        """

        self._with_win = with_win

    @property
    def against_games(self):
        """Gets the against_games of this InlineResponse2006.  # noqa: E501

        against_games  # noqa: E501

        :return: The against_games of this InlineResponse2006.  # noqa: E501
        :rtype: int
        """
        return self._against_games

    @against_games.setter
    def against_games(self, against_games):
        """Sets the against_games of this InlineResponse2006.

        against_games  # noqa: E501

        :param against_games: The against_games of this InlineResponse2006.  # noqa: E501
        :type: int
        """

        self._against_games = against_games

    @property
    def against_win(self):
        """Gets the against_win of this InlineResponse2006.  # noqa: E501

        against_win  # noqa: E501

        :return: The against_win of this InlineResponse2006.  # noqa: E501
        :rtype: int
        """
        return self._against_win

    @against_win.setter
    def against_win(self, against_win):
        """Sets the against_win of this InlineResponse2006.

        against_win  # noqa: E501

        :param against_win: The against_win of this InlineResponse2006.  # noqa: E501
        :type: int
        """

        self._against_win = against_win

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2006, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2006):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
