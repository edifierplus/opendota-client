# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20021Rankings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'score': 'str',
        'steamid': 'str',
        'avatar': 'str',
        'avatarmedium': 'str',
        'avatarfull': 'str',
        'profileurl': 'str',
        'personaname': 'str',
        'cheese': 'int',
        'fh_unavailable': 'bool',
        'loccountrycode': 'str',
        'rank_tier': 'int'
    }

    attribute_map = {
        'account_id': 'account_id',
        'score': 'score',
        'steamid': 'steamid',
        'avatar': 'avatar',
        'avatarmedium': 'avatarmedium',
        'avatarfull': 'avatarfull',
        'profileurl': 'profileurl',
        'personaname': 'personaname',
        'cheese': 'cheese',
        'fh_unavailable': 'fh_unavailable',
        'loccountrycode': 'loccountrycode',
        'rank_tier': 'rank_tier'
    }

    def __init__(self, account_id=None, score=None, steamid=None, avatar=None, avatarmedium=None, avatarfull=None, profileurl=None, personaname=None, cheese=None, fh_unavailable=None, loccountrycode=None, rank_tier=None):  # noqa: E501
        """InlineResponse20021Rankings - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._score = None
        self._steamid = None
        self._avatar = None
        self._avatarmedium = None
        self._avatarfull = None
        self._profileurl = None
        self._personaname = None
        self._cheese = None
        self._fh_unavailable = None
        self._loccountrycode = None
        self._rank_tier = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if score is not None:
            self.score = score
        if steamid is not None:
            self.steamid = steamid
        if avatar is not None:
            self.avatar = avatar
        if avatarmedium is not None:
            self.avatarmedium = avatarmedium
        if avatarfull is not None:
            self.avatarfull = avatarfull
        if profileurl is not None:
            self.profileurl = profileurl
        if personaname is not None:
            self.personaname = personaname
        if cheese is not None:
            self.cheese = cheese
        if fh_unavailable is not None:
            self.fh_unavailable = fh_unavailable
        if loccountrycode is not None:
            self.loccountrycode = loccountrycode
        if rank_tier is not None:
            self.rank_tier = rank_tier

    @property
    def account_id(self):
        """Gets the account_id of this InlineResponse20021Rankings.  # noqa: E501

        account_id  # noqa: E501

        :return: The account_id of this InlineResponse20021Rankings.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InlineResponse20021Rankings.

        account_id  # noqa: E501

        :param account_id: The account_id of this InlineResponse20021Rankings.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def score(self):
        """Gets the score of this InlineResponse20021Rankings.  # noqa: E501

        score  # noqa: E501

        :return: The score of this InlineResponse20021Rankings.  # noqa: E501
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this InlineResponse20021Rankings.

        score  # noqa: E501

        :param score: The score of this InlineResponse20021Rankings.  # noqa: E501
        :type: str
        """

        self._score = score

    @property
    def steamid(self):
        """Gets the steamid of this InlineResponse20021Rankings.  # noqa: E501

        steamid  # noqa: E501

        :return: The steamid of this InlineResponse20021Rankings.  # noqa: E501
        :rtype: str
        """
        return self._steamid

    @steamid.setter
    def steamid(self, steamid):
        """Sets the steamid of this InlineResponse20021Rankings.

        steamid  # noqa: E501

        :param steamid: The steamid of this InlineResponse20021Rankings.  # noqa: E501
        :type: str
        """

        self._steamid = steamid

    @property
    def avatar(self):
        """Gets the avatar of this InlineResponse20021Rankings.  # noqa: E501

        avatar  # noqa: E501

        :return: The avatar of this InlineResponse20021Rankings.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this InlineResponse20021Rankings.

        avatar  # noqa: E501

        :param avatar: The avatar of this InlineResponse20021Rankings.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def avatarmedium(self):
        """Gets the avatarmedium of this InlineResponse20021Rankings.  # noqa: E501

        avatarmedium  # noqa: E501

        :return: The avatarmedium of this InlineResponse20021Rankings.  # noqa: E501
        :rtype: str
        """
        return self._avatarmedium

    @avatarmedium.setter
    def avatarmedium(self, avatarmedium):
        """Sets the avatarmedium of this InlineResponse20021Rankings.

        avatarmedium  # noqa: E501

        :param avatarmedium: The avatarmedium of this InlineResponse20021Rankings.  # noqa: E501
        :type: str
        """

        self._avatarmedium = avatarmedium

    @property
    def avatarfull(self):
        """Gets the avatarfull of this InlineResponse20021Rankings.  # noqa: E501

        avatarfull  # noqa: E501

        :return: The avatarfull of this InlineResponse20021Rankings.  # noqa: E501
        :rtype: str
        """
        return self._avatarfull

    @avatarfull.setter
    def avatarfull(self, avatarfull):
        """Sets the avatarfull of this InlineResponse20021Rankings.

        avatarfull  # noqa: E501

        :param avatarfull: The avatarfull of this InlineResponse20021Rankings.  # noqa: E501
        :type: str
        """

        self._avatarfull = avatarfull

    @property
    def profileurl(self):
        """Gets the profileurl of this InlineResponse20021Rankings.  # noqa: E501

        profileurl  # noqa: E501

        :return: The profileurl of this InlineResponse20021Rankings.  # noqa: E501
        :rtype: str
        """
        return self._profileurl

    @profileurl.setter
    def profileurl(self, profileurl):
        """Sets the profileurl of this InlineResponse20021Rankings.

        profileurl  # noqa: E501

        :param profileurl: The profileurl of this InlineResponse20021Rankings.  # noqa: E501
        :type: str
        """

        self._profileurl = profileurl

    @property
    def personaname(self):
        """Gets the personaname of this InlineResponse20021Rankings.  # noqa: E501

        personaname  # noqa: E501

        :return: The personaname of this InlineResponse20021Rankings.  # noqa: E501
        :rtype: str
        """
        return self._personaname

    @personaname.setter
    def personaname(self, personaname):
        """Sets the personaname of this InlineResponse20021Rankings.

        personaname  # noqa: E501

        :param personaname: The personaname of this InlineResponse20021Rankings.  # noqa: E501
        :type: str
        """

        self._personaname = personaname

    @property
    def cheese(self):
        """Gets the cheese of this InlineResponse20021Rankings.  # noqa: E501

        cheese  # noqa: E501

        :return: The cheese of this InlineResponse20021Rankings.  # noqa: E501
        :rtype: int
        """
        return self._cheese

    @cheese.setter
    def cheese(self, cheese):
        """Sets the cheese of this InlineResponse20021Rankings.

        cheese  # noqa: E501

        :param cheese: The cheese of this InlineResponse20021Rankings.  # noqa: E501
        :type: int
        """

        self._cheese = cheese

    @property
    def fh_unavailable(self):
        """Gets the fh_unavailable of this InlineResponse20021Rankings.  # noqa: E501

        fh_unavailable  # noqa: E501

        :return: The fh_unavailable of this InlineResponse20021Rankings.  # noqa: E501
        :rtype: bool
        """
        return self._fh_unavailable

    @fh_unavailable.setter
    def fh_unavailable(self, fh_unavailable):
        """Sets the fh_unavailable of this InlineResponse20021Rankings.

        fh_unavailable  # noqa: E501

        :param fh_unavailable: The fh_unavailable of this InlineResponse20021Rankings.  # noqa: E501
        :type: bool
        """

        self._fh_unavailable = fh_unavailable

    @property
    def loccountrycode(self):
        """Gets the loccountrycode of this InlineResponse20021Rankings.  # noqa: E501

        loccountrycode  # noqa: E501

        :return: The loccountrycode of this InlineResponse20021Rankings.  # noqa: E501
        :rtype: str
        """
        return self._loccountrycode

    @loccountrycode.setter
    def loccountrycode(self, loccountrycode):
        """Sets the loccountrycode of this InlineResponse20021Rankings.

        loccountrycode  # noqa: E501

        :param loccountrycode: The loccountrycode of this InlineResponse20021Rankings.  # noqa: E501
        :type: str
        """

        self._loccountrycode = loccountrycode

    @property
    def rank_tier(self):
        """Gets the rank_tier of this InlineResponse20021Rankings.  # noqa: E501

        rank_tier  # noqa: E501

        :return: The rank_tier of this InlineResponse20021Rankings.  # noqa: E501
        :rtype: int
        """
        return self._rank_tier

    @rank_tier.setter
    def rank_tier(self, rank_tier):
        """Sets the rank_tier of this InlineResponse20021Rankings.

        rank_tier  # noqa: E501

        :param rank_tier: The rank_tier of this InlineResponse20021Rankings.  # noqa: E501
        :type: int
        """

        self._rank_tier = rank_tier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20021Rankings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20021Rankings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
