# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2005(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match_id': 'int',
        'player_slot': 'int',
        'radiant_win': 'bool',
        'duration': 'int',
        'game_mode': 'int',
        'lobby_type': 'int',
        'hero_id': 'int',
        'start_time': 'int',
        'version': 'int',
        'kills': 'int',
        'deaths': 'int',
        'assists': 'int',
        'skill': 'int',
        'party_size': 'int',
        'heroes': 'PlayersaccountIdmatchesHeroes'
    }

    attribute_map = {
        'match_id': 'match_id',
        'player_slot': 'player_slot',
        'radiant_win': 'radiant_win',
        'duration': 'duration',
        'game_mode': 'game_mode',
        'lobby_type': 'lobby_type',
        'hero_id': 'hero_id',
        'start_time': 'start_time',
        'version': 'version',
        'kills': 'kills',
        'deaths': 'deaths',
        'assists': 'assists',
        'skill': 'skill',
        'party_size': 'party_size',
        'heroes': 'heroes'
    }

    def __init__(self, match_id=None, player_slot=None, radiant_win=None, duration=None, game_mode=None, lobby_type=None, hero_id=None, start_time=None, version=None, kills=None, deaths=None, assists=None, skill=None, party_size=None, heroes=None):  # noqa: E501
        """InlineResponse2005 - a model defined in Swagger"""  # noqa: E501

        self._match_id = None
        self._player_slot = None
        self._radiant_win = None
        self._duration = None
        self._game_mode = None
        self._lobby_type = None
        self._hero_id = None
        self._start_time = None
        self._version = None
        self._kills = None
        self._deaths = None
        self._assists = None
        self._skill = None
        self._party_size = None
        self._heroes = None
        self.discriminator = None

        if match_id is not None:
            self.match_id = match_id
        if player_slot is not None:
            self.player_slot = player_slot
        if radiant_win is not None:
            self.radiant_win = radiant_win
        if duration is not None:
            self.duration = duration
        if game_mode is not None:
            self.game_mode = game_mode
        if lobby_type is not None:
            self.lobby_type = lobby_type
        if hero_id is not None:
            self.hero_id = hero_id
        if start_time is not None:
            self.start_time = start_time
        if version is not None:
            self.version = version
        if kills is not None:
            self.kills = kills
        if deaths is not None:
            self.deaths = deaths
        if assists is not None:
            self.assists = assists
        if skill is not None:
            self.skill = skill
        if party_size is not None:
            self.party_size = party_size
        if heroes is not None:
            self.heroes = heroes

    @property
    def match_id(self):
        """Gets the match_id of this InlineResponse2005.  # noqa: E501

        Match ID  # noqa: E501

        :return: The match_id of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this InlineResponse2005.

        Match ID  # noqa: E501

        :param match_id: The match_id of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._match_id = match_id

    @property
    def player_slot(self):
        """Gets the player_slot of this InlineResponse2005.  # noqa: E501

        Which slot the player is in. 0-127 are Radiant, 128-255 are Dire  # noqa: E501

        :return: The player_slot of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._player_slot

    @player_slot.setter
    def player_slot(self, player_slot):
        """Sets the player_slot of this InlineResponse2005.

        Which slot the player is in. 0-127 are Radiant, 128-255 are Dire  # noqa: E501

        :param player_slot: The player_slot of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._player_slot = player_slot

    @property
    def radiant_win(self):
        """Gets the radiant_win of this InlineResponse2005.  # noqa: E501

        Boolean indicating whether Radiant won the match  # noqa: E501

        :return: The radiant_win of this InlineResponse2005.  # noqa: E501
        :rtype: bool
        """
        return self._radiant_win

    @radiant_win.setter
    def radiant_win(self, radiant_win):
        """Sets the radiant_win of this InlineResponse2005.

        Boolean indicating whether Radiant won the match  # noqa: E501

        :param radiant_win: The radiant_win of this InlineResponse2005.  # noqa: E501
        :type: bool
        """

        self._radiant_win = radiant_win

    @property
    def duration(self):
        """Gets the duration of this InlineResponse2005.  # noqa: E501

        Duration of the game in seconds  # noqa: E501

        :return: The duration of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse2005.

        Duration of the game in seconds  # noqa: E501

        :param duration: The duration of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def game_mode(self):
        """Gets the game_mode of this InlineResponse2005.  # noqa: E501

        Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json  # noqa: E501

        :return: The game_mode of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._game_mode

    @game_mode.setter
    def game_mode(self, game_mode):
        """Sets the game_mode of this InlineResponse2005.

        Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json  # noqa: E501

        :param game_mode: The game_mode of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._game_mode = game_mode

    @property
    def lobby_type(self):
        """Gets the lobby_type of this InlineResponse2005.  # noqa: E501

        Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json  # noqa: E501

        :return: The lobby_type of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._lobby_type

    @lobby_type.setter
    def lobby_type(self, lobby_type):
        """Sets the lobby_type of this InlineResponse2005.

        Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json  # noqa: E501

        :param lobby_type: The lobby_type of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._lobby_type = lobby_type

    @property
    def hero_id(self):
        """Gets the hero_id of this InlineResponse2005.  # noqa: E501

        The ID value of the hero played  # noqa: E501

        :return: The hero_id of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._hero_id

    @hero_id.setter
    def hero_id(self, hero_id):
        """Sets the hero_id of this InlineResponse2005.

        The ID value of the hero played  # noqa: E501

        :param hero_id: The hero_id of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._hero_id = hero_id

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse2005.  # noqa: E501

        Time the game started in seconds since 1970  # noqa: E501

        :return: The start_time of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse2005.

        Time the game started in seconds since 1970  # noqa: E501

        :param start_time: The start_time of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def version(self):
        """Gets the version of this InlineResponse2005.  # noqa: E501

        version  # noqa: E501

        :return: The version of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse2005.

        version  # noqa: E501

        :param version: The version of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def kills(self):
        """Gets the kills of this InlineResponse2005.  # noqa: E501

        Total kills the player had at the end of the game  # noqa: E501

        :return: The kills of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._kills

    @kills.setter
    def kills(self, kills):
        """Sets the kills of this InlineResponse2005.

        Total kills the player had at the end of the game  # noqa: E501

        :param kills: The kills of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._kills = kills

    @property
    def deaths(self):
        """Gets the deaths of this InlineResponse2005.  # noqa: E501

        Total deaths the player had at the end of the game  # noqa: E501

        :return: The deaths of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._deaths

    @deaths.setter
    def deaths(self, deaths):
        """Sets the deaths of this InlineResponse2005.

        Total deaths the player had at the end of the game  # noqa: E501

        :param deaths: The deaths of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._deaths = deaths

    @property
    def assists(self):
        """Gets the assists of this InlineResponse2005.  # noqa: E501

        Total assists the player had at the end of the game  # noqa: E501

        :return: The assists of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._assists

    @assists.setter
    def assists(self, assists):
        """Sets the assists of this InlineResponse2005.

        Total assists the player had at the end of the game  # noqa: E501

        :param assists: The assists of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._assists = assists

    @property
    def skill(self):
        """Gets the skill of this InlineResponse2005.  # noqa: E501

        Skill bracket assigned by Valve (Normal, High, Very High)  # noqa: E501

        :return: The skill of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._skill

    @skill.setter
    def skill(self, skill):
        """Sets the skill of this InlineResponse2005.

        Skill bracket assigned by Valve (Normal, High, Very High)  # noqa: E501

        :param skill: The skill of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._skill = skill

    @property
    def party_size(self):
        """Gets the party_size of this InlineResponse2005.  # noqa: E501

        Size of the player's party  # noqa: E501

        :return: The party_size of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._party_size

    @party_size.setter
    def party_size(self, party_size):
        """Sets the party_size of this InlineResponse2005.

        Size of the player's party  # noqa: E501

        :param party_size: The party_size of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._party_size = party_size

    @property
    def heroes(self):
        """Gets the heroes of this InlineResponse2005.  # noqa: E501


        :return: The heroes of this InlineResponse2005.  # noqa: E501
        :rtype: PlayersaccountIdmatchesHeroes
        """
        return self._heroes

    @heroes.setter
    def heroes(self, heroes):
        """Sets the heroes of this InlineResponse2005.


        :param heroes: The heroes of this InlineResponse2005.  # noqa: E501
        :type: PlayersaccountIdmatchesHeroes
        """

        self._heroes = heroes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
