# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20028(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'leagueid': 'int',
        'ticket': 'str',
        'banner': 'str',
        'tier': 'str',
        'name': 'str'
    }

    attribute_map = {
        'leagueid': 'leagueid',
        'ticket': 'ticket',
        'banner': 'banner',
        'tier': 'tier',
        'name': 'name'
    }

    def __init__(self, leagueid=None, ticket=None, banner=None, tier=None, name=None):  # noqa: E501
        """InlineResponse20028 - a model defined in Swagger"""  # noqa: E501

        self._leagueid = None
        self._ticket = None
        self._banner = None
        self._tier = None
        self._name = None
        self.discriminator = None

        if leagueid is not None:
            self.leagueid = leagueid
        if ticket is not None:
            self.ticket = ticket
        if banner is not None:
            self.banner = banner
        if tier is not None:
            self.tier = tier
        if name is not None:
            self.name = name

    @property
    def leagueid(self):
        """Gets the leagueid of this InlineResponse20028.  # noqa: E501

        leagueid  # noqa: E501

        :return: The leagueid of this InlineResponse20028.  # noqa: E501
        :rtype: int
        """
        return self._leagueid

    @leagueid.setter
    def leagueid(self, leagueid):
        """Sets the leagueid of this InlineResponse20028.

        leagueid  # noqa: E501

        :param leagueid: The leagueid of this InlineResponse20028.  # noqa: E501
        :type: int
        """

        self._leagueid = leagueid

    @property
    def ticket(self):
        """Gets the ticket of this InlineResponse20028.  # noqa: E501

        ticket  # noqa: E501

        :return: The ticket of this InlineResponse20028.  # noqa: E501
        :rtype: str
        """
        return self._ticket

    @ticket.setter
    def ticket(self, ticket):
        """Sets the ticket of this InlineResponse20028.

        ticket  # noqa: E501

        :param ticket: The ticket of this InlineResponse20028.  # noqa: E501
        :type: str
        """

        self._ticket = ticket

    @property
    def banner(self):
        """Gets the banner of this InlineResponse20028.  # noqa: E501

        banner  # noqa: E501

        :return: The banner of this InlineResponse20028.  # noqa: E501
        :rtype: str
        """
        return self._banner

    @banner.setter
    def banner(self, banner):
        """Sets the banner of this InlineResponse20028.

        banner  # noqa: E501

        :param banner: The banner of this InlineResponse20028.  # noqa: E501
        :type: str
        """

        self._banner = banner

    @property
    def tier(self):
        """Gets the tier of this InlineResponse20028.  # noqa: E501

        tier  # noqa: E501

        :return: The tier of this InlineResponse20028.  # noqa: E501
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this InlineResponse20028.

        tier  # noqa: E501

        :param tier: The tier of this InlineResponse20028.  # noqa: E501
        :type: str
        """

        self._tier = tier

    @property
    def name(self):
        """Gets the name of this InlineResponse20028.  # noqa: E501

        name  # noqa: E501

        :return: The name of this InlineResponse20028.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20028.

        name  # noqa: E501

        :param name: The name of this InlineResponse20028.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20028, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20028):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
