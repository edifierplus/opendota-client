# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2002(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tracked_until': 'str',
        'solo_competitive_rank': 'str',
        'competitive_rank': 'str',
        'rank_tier': 'float',
        'leaderboard_rank': 'float',
        'mmr_estimate': 'InlineResponse2002MmrEstimate',
        'profile': 'InlineResponse2002Profile'
    }

    attribute_map = {
        'tracked_until': 'tracked_until',
        'solo_competitive_rank': 'solo_competitive_rank',
        'competitive_rank': 'competitive_rank',
        'rank_tier': 'rank_tier',
        'leaderboard_rank': 'leaderboard_rank',
        'mmr_estimate': 'mmr_estimate',
        'profile': 'profile'
    }

    def __init__(self, tracked_until=None, solo_competitive_rank=None, competitive_rank=None, rank_tier=None, leaderboard_rank=None, mmr_estimate=None, profile=None):  # noqa: E501
        """InlineResponse2002 - a model defined in Swagger"""  # noqa: E501

        self._tracked_until = None
        self._solo_competitive_rank = None
        self._competitive_rank = None
        self._rank_tier = None
        self._leaderboard_rank = None
        self._mmr_estimate = None
        self._profile = None
        self.discriminator = None

        if tracked_until is not None:
            self.tracked_until = tracked_until
        if solo_competitive_rank is not None:
            self.solo_competitive_rank = solo_competitive_rank
        if competitive_rank is not None:
            self.competitive_rank = competitive_rank
        if rank_tier is not None:
            self.rank_tier = rank_tier
        if leaderboard_rank is not None:
            self.leaderboard_rank = leaderboard_rank
        if mmr_estimate is not None:
            self.mmr_estimate = mmr_estimate
        if profile is not None:
            self.profile = profile

    @property
    def tracked_until(self):
        """Gets the tracked_until of this InlineResponse2002.  # noqa: E501

        tracked_until  # noqa: E501

        :return: The tracked_until of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._tracked_until

    @tracked_until.setter
    def tracked_until(self, tracked_until):
        """Sets the tracked_until of this InlineResponse2002.

        tracked_until  # noqa: E501

        :param tracked_until: The tracked_until of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._tracked_until = tracked_until

    @property
    def solo_competitive_rank(self):
        """Gets the solo_competitive_rank of this InlineResponse2002.  # noqa: E501

        solo_competitive_rank  # noqa: E501

        :return: The solo_competitive_rank of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._solo_competitive_rank

    @solo_competitive_rank.setter
    def solo_competitive_rank(self, solo_competitive_rank):
        """Sets the solo_competitive_rank of this InlineResponse2002.

        solo_competitive_rank  # noqa: E501

        :param solo_competitive_rank: The solo_competitive_rank of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._solo_competitive_rank = solo_competitive_rank

    @property
    def competitive_rank(self):
        """Gets the competitive_rank of this InlineResponse2002.  # noqa: E501

        competitive_rank  # noqa: E501

        :return: The competitive_rank of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._competitive_rank

    @competitive_rank.setter
    def competitive_rank(self, competitive_rank):
        """Sets the competitive_rank of this InlineResponse2002.

        competitive_rank  # noqa: E501

        :param competitive_rank: The competitive_rank of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._competitive_rank = competitive_rank

    @property
    def rank_tier(self):
        """Gets the rank_tier of this InlineResponse2002.  # noqa: E501

        rank_tier  # noqa: E501

        :return: The rank_tier of this InlineResponse2002.  # noqa: E501
        :rtype: float
        """
        return self._rank_tier

    @rank_tier.setter
    def rank_tier(self, rank_tier):
        """Sets the rank_tier of this InlineResponse2002.

        rank_tier  # noqa: E501

        :param rank_tier: The rank_tier of this InlineResponse2002.  # noqa: E501
        :type: float
        """

        self._rank_tier = rank_tier

    @property
    def leaderboard_rank(self):
        """Gets the leaderboard_rank of this InlineResponse2002.  # noqa: E501

        leaderboard_rank  # noqa: E501

        :return: The leaderboard_rank of this InlineResponse2002.  # noqa: E501
        :rtype: float
        """
        return self._leaderboard_rank

    @leaderboard_rank.setter
    def leaderboard_rank(self, leaderboard_rank):
        """Sets the leaderboard_rank of this InlineResponse2002.

        leaderboard_rank  # noqa: E501

        :param leaderboard_rank: The leaderboard_rank of this InlineResponse2002.  # noqa: E501
        :type: float
        """

        self._leaderboard_rank = leaderboard_rank

    @property
    def mmr_estimate(self):
        """Gets the mmr_estimate of this InlineResponse2002.  # noqa: E501


        :return: The mmr_estimate of this InlineResponse2002.  # noqa: E501
        :rtype: InlineResponse2002MmrEstimate
        """
        return self._mmr_estimate

    @mmr_estimate.setter
    def mmr_estimate(self, mmr_estimate):
        """Sets the mmr_estimate of this InlineResponse2002.


        :param mmr_estimate: The mmr_estimate of this InlineResponse2002.  # noqa: E501
        :type: InlineResponse2002MmrEstimate
        """

        self._mmr_estimate = mmr_estimate

    @property
    def profile(self):
        """Gets the profile of this InlineResponse2002.  # noqa: E501


        :return: The profile of this InlineResponse2002.  # noqa: E501
        :rtype: InlineResponse2002Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this InlineResponse2002.


        :param profile: The profile of this InlineResponse2002.  # noqa: E501
        :type: InlineResponse2002Profile
        """

        self._profile = profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
