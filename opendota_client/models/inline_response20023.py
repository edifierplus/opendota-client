# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20023(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'localized_name': 'str',
        'primary_attr': 'str',
        'attack_type': 'str',
        'roles': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'localized_name': 'localized_name',
        'primary_attr': 'primary_attr',
        'attack_type': 'attack_type',
        'roles': 'roles'
    }

    def __init__(self, id=None, name=None, localized_name=None, primary_attr=None, attack_type=None, roles=None):  # noqa: E501
        """InlineResponse20023 - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._localized_name = None
        self._primary_attr = None
        self._attack_type = None
        self._roles = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if localized_name is not None:
            self.localized_name = localized_name
        if primary_attr is not None:
            self.primary_attr = primary_attr
        if attack_type is not None:
            self.attack_type = attack_type
        if roles is not None:
            self.roles = roles

    @property
    def id(self):
        """Gets the id of this InlineResponse20023.  # noqa: E501

        Numeric identifier for the hero object  # noqa: E501

        :return: The id of this InlineResponse20023.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20023.

        Numeric identifier for the hero object  # noqa: E501

        :param id: The id of this InlineResponse20023.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20023.  # noqa: E501

        Dota hero command name, e.g. 'npc_dota_hero_antimage'  # noqa: E501

        :return: The name of this InlineResponse20023.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20023.

        Dota hero command name, e.g. 'npc_dota_hero_antimage'  # noqa: E501

        :param name: The name of this InlineResponse20023.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def localized_name(self):
        """Gets the localized_name of this InlineResponse20023.  # noqa: E501

        Hero name, e.g. 'Anti-Mage'  # noqa: E501

        :return: The localized_name of this InlineResponse20023.  # noqa: E501
        :rtype: str
        """
        return self._localized_name

    @localized_name.setter
    def localized_name(self, localized_name):
        """Sets the localized_name of this InlineResponse20023.

        Hero name, e.g. 'Anti-Mage'  # noqa: E501

        :param localized_name: The localized_name of this InlineResponse20023.  # noqa: E501
        :type: str
        """

        self._localized_name = localized_name

    @property
    def primary_attr(self):
        """Gets the primary_attr of this InlineResponse20023.  # noqa: E501

        Hero primary shorthand attribute name, e.g. 'agi'  # noqa: E501

        :return: The primary_attr of this InlineResponse20023.  # noqa: E501
        :rtype: str
        """
        return self._primary_attr

    @primary_attr.setter
    def primary_attr(self, primary_attr):
        """Sets the primary_attr of this InlineResponse20023.

        Hero primary shorthand attribute name, e.g. 'agi'  # noqa: E501

        :param primary_attr: The primary_attr of this InlineResponse20023.  # noqa: E501
        :type: str
        """

        self._primary_attr = primary_attr

    @property
    def attack_type(self):
        """Gets the attack_type of this InlineResponse20023.  # noqa: E501

        Hero attack type, either 'Melee' or 'Ranged'  # noqa: E501

        :return: The attack_type of this InlineResponse20023.  # noqa: E501
        :rtype: str
        """
        return self._attack_type

    @attack_type.setter
    def attack_type(self, attack_type):
        """Sets the attack_type of this InlineResponse20023.

        Hero attack type, either 'Melee' or 'Ranged'  # noqa: E501

        :param attack_type: The attack_type of this InlineResponse20023.  # noqa: E501
        :type: str
        """

        self._attack_type = attack_type

    @property
    def roles(self):
        """Gets the roles of this InlineResponse20023.  # noqa: E501


        :return: The roles of this InlineResponse20023.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this InlineResponse20023.


        :param roles: The roles of this InlineResponse20023.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20023, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20023):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
