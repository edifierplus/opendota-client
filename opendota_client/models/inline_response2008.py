# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2008(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'name': 'str',
        'country_code': 'str',
        'fantasy_role': 'int',
        'team_id': 'int',
        'team_name': 'str',
        'team_tag': 'str',
        'is_locked': 'bool',
        'is_pro': 'bool',
        'locked_until': 'int',
        'steamid': 'str',
        'avatar': 'str',
        'avatarmedium': 'str',
        'avatarfull': 'str',
        'profileurl': 'str',
        'cheese': 'int',
        'fh_unavailable': 'bool',
        'loccountrycode': 'str',
        'last_played': 'int',
        'win': 'int',
        'games': 'int',
        'with_win': 'int',
        'with_games': 'int',
        'against_win': 'int',
        'against_games': 'int',
        'with_gpm_sum': 'int',
        'with_xpm_sum': 'int'
    }

    attribute_map = {
        'account_id': 'account_id',
        'name': 'name',
        'country_code': 'country_code',
        'fantasy_role': 'fantasy_role',
        'team_id': 'team_id',
        'team_name': 'team_name',
        'team_tag': 'team_tag',
        'is_locked': 'is_locked',
        'is_pro': 'is_pro',
        'locked_until': 'locked_until',
        'steamid': 'steamid',
        'avatar': 'avatar',
        'avatarmedium': 'avatarmedium',
        'avatarfull': 'avatarfull',
        'profileurl': 'profileurl',
        'cheese': 'cheese',
        'fh_unavailable': 'fh_unavailable',
        'loccountrycode': 'loccountrycode',
        'last_played': 'last_played',
        'win': 'win',
        'games': 'games',
        'with_win': 'with_win',
        'with_games': 'with_games',
        'against_win': 'against_win',
        'against_games': 'against_games',
        'with_gpm_sum': 'with_gpm_sum',
        'with_xpm_sum': 'with_xpm_sum'
    }

    def __init__(self, account_id=None, name=None, country_code=None, fantasy_role=None, team_id=None, team_name=None, team_tag=None, is_locked=None, is_pro=None, locked_until=None, steamid=None, avatar=None, avatarmedium=None, avatarfull=None, profileurl=None, cheese=None, fh_unavailable=None, loccountrycode=None, last_played=None, win=None, games=None, with_win=None, with_games=None, against_win=None, against_games=None, with_gpm_sum=None, with_xpm_sum=None):  # noqa: E501
        """InlineResponse2008 - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._name = None
        self._country_code = None
        self._fantasy_role = None
        self._team_id = None
        self._team_name = None
        self._team_tag = None
        self._is_locked = None
        self._is_pro = None
        self._locked_until = None
        self._steamid = None
        self._avatar = None
        self._avatarmedium = None
        self._avatarfull = None
        self._profileurl = None
        self._cheese = None
        self._fh_unavailable = None
        self._loccountrycode = None
        self._last_played = None
        self._win = None
        self._games = None
        self._with_win = None
        self._with_games = None
        self._against_win = None
        self._against_games = None
        self._with_gpm_sum = None
        self._with_xpm_sum = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if name is not None:
            self.name = name
        if country_code is not None:
            self.country_code = country_code
        if fantasy_role is not None:
            self.fantasy_role = fantasy_role
        if team_id is not None:
            self.team_id = team_id
        if team_name is not None:
            self.team_name = team_name
        if team_tag is not None:
            self.team_tag = team_tag
        if is_locked is not None:
            self.is_locked = is_locked
        if is_pro is not None:
            self.is_pro = is_pro
        if locked_until is not None:
            self.locked_until = locked_until
        if steamid is not None:
            self.steamid = steamid
        if avatar is not None:
            self.avatar = avatar
        if avatarmedium is not None:
            self.avatarmedium = avatarmedium
        if avatarfull is not None:
            self.avatarfull = avatarfull
        if profileurl is not None:
            self.profileurl = profileurl
        if cheese is not None:
            self.cheese = cheese
        if fh_unavailable is not None:
            self.fh_unavailable = fh_unavailable
        if loccountrycode is not None:
            self.loccountrycode = loccountrycode
        if last_played is not None:
            self.last_played = last_played
        if win is not None:
            self.win = win
        if games is not None:
            self.games = games
        if with_win is not None:
            self.with_win = with_win
        if with_games is not None:
            self.with_games = with_games
        if against_win is not None:
            self.against_win = against_win
        if against_games is not None:
            self.against_games = against_games
        if with_gpm_sum is not None:
            self.with_gpm_sum = with_gpm_sum
        if with_xpm_sum is not None:
            self.with_xpm_sum = with_xpm_sum

    @property
    def account_id(self):
        """Gets the account_id of this InlineResponse2008.  # noqa: E501

        account_id  # noqa: E501

        :return: The account_id of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InlineResponse2008.

        account_id  # noqa: E501

        :param account_id: The account_id of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def name(self):
        """Gets the name of this InlineResponse2008.  # noqa: E501

        name  # noqa: E501

        :return: The name of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2008.

        name  # noqa: E501

        :param name: The name of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def country_code(self):
        """Gets the country_code of this InlineResponse2008.  # noqa: E501

        country_code  # noqa: E501

        :return: The country_code of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this InlineResponse2008.

        country_code  # noqa: E501

        :param country_code: The country_code of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def fantasy_role(self):
        """Gets the fantasy_role of this InlineResponse2008.  # noqa: E501

        fantasy_role  # noqa: E501

        :return: The fantasy_role of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._fantasy_role

    @fantasy_role.setter
    def fantasy_role(self, fantasy_role):
        """Sets the fantasy_role of this InlineResponse2008.

        fantasy_role  # noqa: E501

        :param fantasy_role: The fantasy_role of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._fantasy_role = fantasy_role

    @property
    def team_id(self):
        """Gets the team_id of this InlineResponse2008.  # noqa: E501

        team_id  # noqa: E501

        :return: The team_id of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this InlineResponse2008.

        team_id  # noqa: E501

        :param team_id: The team_id of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def team_name(self):
        """Gets the team_name of this InlineResponse2008.  # noqa: E501

        team_name  # noqa: E501

        :return: The team_name of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this InlineResponse2008.

        team_name  # noqa: E501

        :param team_name: The team_name of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._team_name = team_name

    @property
    def team_tag(self):
        """Gets the team_tag of this InlineResponse2008.  # noqa: E501

        team_tag  # noqa: E501

        :return: The team_tag of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._team_tag

    @team_tag.setter
    def team_tag(self, team_tag):
        """Sets the team_tag of this InlineResponse2008.

        team_tag  # noqa: E501

        :param team_tag: The team_tag of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._team_tag = team_tag

    @property
    def is_locked(self):
        """Gets the is_locked of this InlineResponse2008.  # noqa: E501

        is_locked  # noqa: E501

        :return: The is_locked of this InlineResponse2008.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this InlineResponse2008.

        is_locked  # noqa: E501

        :param is_locked: The is_locked of this InlineResponse2008.  # noqa: E501
        :type: bool
        """

        self._is_locked = is_locked

    @property
    def is_pro(self):
        """Gets the is_pro of this InlineResponse2008.  # noqa: E501

        is_pro  # noqa: E501

        :return: The is_pro of this InlineResponse2008.  # noqa: E501
        :rtype: bool
        """
        return self._is_pro

    @is_pro.setter
    def is_pro(self, is_pro):
        """Sets the is_pro of this InlineResponse2008.

        is_pro  # noqa: E501

        :param is_pro: The is_pro of this InlineResponse2008.  # noqa: E501
        :type: bool
        """

        self._is_pro = is_pro

    @property
    def locked_until(self):
        """Gets the locked_until of this InlineResponse2008.  # noqa: E501

        locked_until  # noqa: E501

        :return: The locked_until of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._locked_until

    @locked_until.setter
    def locked_until(self, locked_until):
        """Sets the locked_until of this InlineResponse2008.

        locked_until  # noqa: E501

        :param locked_until: The locked_until of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._locked_until = locked_until

    @property
    def steamid(self):
        """Gets the steamid of this InlineResponse2008.  # noqa: E501

        steamid  # noqa: E501

        :return: The steamid of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._steamid

    @steamid.setter
    def steamid(self, steamid):
        """Sets the steamid of this InlineResponse2008.

        steamid  # noqa: E501

        :param steamid: The steamid of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._steamid = steamid

    @property
    def avatar(self):
        """Gets the avatar of this InlineResponse2008.  # noqa: E501

        avatar  # noqa: E501

        :return: The avatar of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this InlineResponse2008.

        avatar  # noqa: E501

        :param avatar: The avatar of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def avatarmedium(self):
        """Gets the avatarmedium of this InlineResponse2008.  # noqa: E501

        avatarmedium  # noqa: E501

        :return: The avatarmedium of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._avatarmedium

    @avatarmedium.setter
    def avatarmedium(self, avatarmedium):
        """Sets the avatarmedium of this InlineResponse2008.

        avatarmedium  # noqa: E501

        :param avatarmedium: The avatarmedium of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._avatarmedium = avatarmedium

    @property
    def avatarfull(self):
        """Gets the avatarfull of this InlineResponse2008.  # noqa: E501

        avatarfull  # noqa: E501

        :return: The avatarfull of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._avatarfull

    @avatarfull.setter
    def avatarfull(self, avatarfull):
        """Sets the avatarfull of this InlineResponse2008.

        avatarfull  # noqa: E501

        :param avatarfull: The avatarfull of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._avatarfull = avatarfull

    @property
    def profileurl(self):
        """Gets the profileurl of this InlineResponse2008.  # noqa: E501

        profileurl  # noqa: E501

        :return: The profileurl of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._profileurl

    @profileurl.setter
    def profileurl(self, profileurl):
        """Sets the profileurl of this InlineResponse2008.

        profileurl  # noqa: E501

        :param profileurl: The profileurl of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._profileurl = profileurl

    @property
    def cheese(self):
        """Gets the cheese of this InlineResponse2008.  # noqa: E501

        cheese  # noqa: E501

        :return: The cheese of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._cheese

    @cheese.setter
    def cheese(self, cheese):
        """Sets the cheese of this InlineResponse2008.

        cheese  # noqa: E501

        :param cheese: The cheese of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._cheese = cheese

    @property
    def fh_unavailable(self):
        """Gets the fh_unavailable of this InlineResponse2008.  # noqa: E501

        fh_unavailable  # noqa: E501

        :return: The fh_unavailable of this InlineResponse2008.  # noqa: E501
        :rtype: bool
        """
        return self._fh_unavailable

    @fh_unavailable.setter
    def fh_unavailable(self, fh_unavailable):
        """Sets the fh_unavailable of this InlineResponse2008.

        fh_unavailable  # noqa: E501

        :param fh_unavailable: The fh_unavailable of this InlineResponse2008.  # noqa: E501
        :type: bool
        """

        self._fh_unavailable = fh_unavailable

    @property
    def loccountrycode(self):
        """Gets the loccountrycode of this InlineResponse2008.  # noqa: E501

        loccountrycode  # noqa: E501

        :return: The loccountrycode of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._loccountrycode

    @loccountrycode.setter
    def loccountrycode(self, loccountrycode):
        """Sets the loccountrycode of this InlineResponse2008.

        loccountrycode  # noqa: E501

        :param loccountrycode: The loccountrycode of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._loccountrycode = loccountrycode

    @property
    def last_played(self):
        """Gets the last_played of this InlineResponse2008.  # noqa: E501

        last_played  # noqa: E501

        :return: The last_played of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._last_played

    @last_played.setter
    def last_played(self, last_played):
        """Sets the last_played of this InlineResponse2008.

        last_played  # noqa: E501

        :param last_played: The last_played of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._last_played = last_played

    @property
    def win(self):
        """Gets the win of this InlineResponse2008.  # noqa: E501

        win  # noqa: E501

        :return: The win of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._win

    @win.setter
    def win(self, win):
        """Sets the win of this InlineResponse2008.

        win  # noqa: E501

        :param win: The win of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._win = win

    @property
    def games(self):
        """Gets the games of this InlineResponse2008.  # noqa: E501

        games  # noqa: E501

        :return: The games of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this InlineResponse2008.

        games  # noqa: E501

        :param games: The games of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._games = games

    @property
    def with_win(self):
        """Gets the with_win of this InlineResponse2008.  # noqa: E501

        with_win  # noqa: E501

        :return: The with_win of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._with_win

    @with_win.setter
    def with_win(self, with_win):
        """Sets the with_win of this InlineResponse2008.

        with_win  # noqa: E501

        :param with_win: The with_win of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._with_win = with_win

    @property
    def with_games(self):
        """Gets the with_games of this InlineResponse2008.  # noqa: E501

        with_games  # noqa: E501

        :return: The with_games of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._with_games

    @with_games.setter
    def with_games(self, with_games):
        """Sets the with_games of this InlineResponse2008.

        with_games  # noqa: E501

        :param with_games: The with_games of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._with_games = with_games

    @property
    def against_win(self):
        """Gets the against_win of this InlineResponse2008.  # noqa: E501

        against_win  # noqa: E501

        :return: The against_win of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._against_win

    @against_win.setter
    def against_win(self, against_win):
        """Sets the against_win of this InlineResponse2008.

        against_win  # noqa: E501

        :param against_win: The against_win of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._against_win = against_win

    @property
    def against_games(self):
        """Gets the against_games of this InlineResponse2008.  # noqa: E501

        against_games  # noqa: E501

        :return: The against_games of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._against_games

    @against_games.setter
    def against_games(self, against_games):
        """Sets the against_games of this InlineResponse2008.

        against_games  # noqa: E501

        :param against_games: The against_games of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._against_games = against_games

    @property
    def with_gpm_sum(self):
        """Gets the with_gpm_sum of this InlineResponse2008.  # noqa: E501

        with_gpm_sum  # noqa: E501

        :return: The with_gpm_sum of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._with_gpm_sum

    @with_gpm_sum.setter
    def with_gpm_sum(self, with_gpm_sum):
        """Sets the with_gpm_sum of this InlineResponse2008.

        with_gpm_sum  # noqa: E501

        :param with_gpm_sum: The with_gpm_sum of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._with_gpm_sum = with_gpm_sum

    @property
    def with_xpm_sum(self):
        """Gets the with_xpm_sum of this InlineResponse2008.  # noqa: E501

        with_xpm_sum  # noqa: E501

        :return: The with_xpm_sum of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._with_xpm_sum

    @with_xpm_sum.setter
    def with_xpm_sum(self, with_xpm_sum):
        """Sets the with_xpm_sum of this InlineResponse2008.

        with_xpm_sum  # noqa: E501

        :param with_xpm_sum: The with_xpm_sum of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._with_xpm_sum = with_xpm_sum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
