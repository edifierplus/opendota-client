# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20019CountryMmrRows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loccountrycode': 'str',
        'count': 'int',
        'avg': 'str',
        'common': 'str'
    }

    attribute_map = {
        'loccountrycode': 'loccountrycode',
        'count': 'count',
        'avg': 'avg',
        'common': 'common'
    }

    def __init__(self, loccountrycode=None, count=None, avg=None, common=None):  # noqa: E501
        """InlineResponse20019CountryMmrRows - a model defined in Swagger"""  # noqa: E501

        self._loccountrycode = None
        self._count = None
        self._avg = None
        self._common = None
        self.discriminator = None

        if loccountrycode is not None:
            self.loccountrycode = loccountrycode
        if count is not None:
            self.count = count
        if avg is not None:
            self.avg = avg
        if common is not None:
            self.common = common

    @property
    def loccountrycode(self):
        """Gets the loccountrycode of this InlineResponse20019CountryMmrRows.  # noqa: E501

        loccountrycode  # noqa: E501

        :return: The loccountrycode of this InlineResponse20019CountryMmrRows.  # noqa: E501
        :rtype: str
        """
        return self._loccountrycode

    @loccountrycode.setter
    def loccountrycode(self, loccountrycode):
        """Sets the loccountrycode of this InlineResponse20019CountryMmrRows.

        loccountrycode  # noqa: E501

        :param loccountrycode: The loccountrycode of this InlineResponse20019CountryMmrRows.  # noqa: E501
        :type: str
        """

        self._loccountrycode = loccountrycode

    @property
    def count(self):
        """Gets the count of this InlineResponse20019CountryMmrRows.  # noqa: E501

        count  # noqa: E501

        :return: The count of this InlineResponse20019CountryMmrRows.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this InlineResponse20019CountryMmrRows.

        count  # noqa: E501

        :param count: The count of this InlineResponse20019CountryMmrRows.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def avg(self):
        """Gets the avg of this InlineResponse20019CountryMmrRows.  # noqa: E501

        avg  # noqa: E501

        :return: The avg of this InlineResponse20019CountryMmrRows.  # noqa: E501
        :rtype: str
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this InlineResponse20019CountryMmrRows.

        avg  # noqa: E501

        :param avg: The avg of this InlineResponse20019CountryMmrRows.  # noqa: E501
        :type: str
        """

        self._avg = avg

    @property
    def common(self):
        """Gets the common of this InlineResponse20019CountryMmrRows.  # noqa: E501

        common  # noqa: E501

        :return: The common of this InlineResponse20019CountryMmrRows.  # noqa: E501
        :rtype: str
        """
        return self._common

    @common.setter
    def common(self, common):
        """Sets the common of this InlineResponse20019CountryMmrRows.

        common  # noqa: E501

        :param common: The common of this InlineResponse20019CountryMmrRows.  # noqa: E501
        :type: str
        """

        self._common = common

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20019CountryMmrRows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20019CountryMmrRows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
