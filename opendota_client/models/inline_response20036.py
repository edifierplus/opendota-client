# coding: utf-8

"""
    OpenDota API

    # Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  **Beginning 2018-04-22, the OpenDota API is limited to 50,000 free calls per month and 60 requests/minute** We offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.   # noqa: E501

    OpenAPI spec version: 18.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20036(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scenario': 'str',
        'is_radiant': 'bool',
        'region': 'int',
        'games': 'str',
        'wins': 'str'
    }

    attribute_map = {
        'scenario': 'scenario',
        'is_radiant': 'is_radiant',
        'region': 'region',
        'games': 'games',
        'wins': 'wins'
    }

    def __init__(self, scenario=None, is_radiant=None, region=None, games=None, wins=None):  # noqa: E501
        """InlineResponse20036 - a model defined in Swagger"""  # noqa: E501

        self._scenario = None
        self._is_radiant = None
        self._region = None
        self._games = None
        self._wins = None
        self.discriminator = None

        if scenario is not None:
            self.scenario = scenario
        if is_radiant is not None:
            self.is_radiant = is_radiant
        if region is not None:
            self.region = region
        if games is not None:
            self.games = games
        if wins is not None:
            self.wins = wins

    @property
    def scenario(self):
        """Gets the scenario of this InlineResponse20036.  # noqa: E501

        The scenario's name or description  # noqa: E501

        :return: The scenario of this InlineResponse20036.  # noqa: E501
        :rtype: str
        """
        return self._scenario

    @scenario.setter
    def scenario(self, scenario):
        """Sets the scenario of this InlineResponse20036.

        The scenario's name or description  # noqa: E501

        :param scenario: The scenario of this InlineResponse20036.  # noqa: E501
        :type: str
        """

        self._scenario = scenario

    @property
    def is_radiant(self):
        """Gets the is_radiant of this InlineResponse20036.  # noqa: E501

        Boolean indicating whether Radiant executed this scenario  # noqa: E501

        :return: The is_radiant of this InlineResponse20036.  # noqa: E501
        :rtype: bool
        """
        return self._is_radiant

    @is_radiant.setter
    def is_radiant(self, is_radiant):
        """Sets the is_radiant of this InlineResponse20036.

        Boolean indicating whether Radiant executed this scenario  # noqa: E501

        :param is_radiant: The is_radiant of this InlineResponse20036.  # noqa: E501
        :type: bool
        """

        self._is_radiant = is_radiant

    @property
    def region(self):
        """Gets the region of this InlineResponse20036.  # noqa: E501

        Region the game was played in  # noqa: E501

        :return: The region of this InlineResponse20036.  # noqa: E501
        :rtype: int
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this InlineResponse20036.

        Region the game was played in  # noqa: E501

        :param region: The region of this InlineResponse20036.  # noqa: E501
        :type: int
        """

        self._region = region

    @property
    def games(self):
        """Gets the games of this InlineResponse20036.  # noqa: E501

        The number of games where this scenario occurred  # noqa: E501

        :return: The games of this InlineResponse20036.  # noqa: E501
        :rtype: str
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this InlineResponse20036.

        The number of games where this scenario occurred  # noqa: E501

        :param games: The games of this InlineResponse20036.  # noqa: E501
        :type: str
        """

        self._games = games

    @property
    def wins(self):
        """Gets the wins of this InlineResponse20036.  # noqa: E501

        The number of games won where this scenario occured  # noqa: E501

        :return: The wins of this InlineResponse20036.  # noqa: E501
        :rtype: str
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this InlineResponse20036.

        The number of games won where this scenario occured  # noqa: E501

        :param wins: The wins of this InlineResponse20036.  # noqa: E501
        :type: str
        """

        self._wins = wins

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20036, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20036):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
